/* {{{ %%SECTION_HEADER%%
 * * * *
 * This header information is automatically generated by KodeUtils.
 *
 * File 'educational-robot-quadruped.scad' edited by kwendenarmo,
 * last modified: 2015-06-06.
 * This file is part of 'Educational robot quadruped' package, please see the
 * readme files for more information about this file and this package.
 *
 * Copyright (C) 2015 by kwendenarmo <kwendenarmo@akornsys-rdi.net>
 * Released under the GNU GPLv3
 * Original design 'Mini Quadruped - optimized for 9G servos' by TheCase
 * is licensed under the Creative Commons - Attribution license.
 * <http://www.thingiverse.com/thing:38159>
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * * * *
 * %%EOS_HEADER%% }}}
 */

$fn=360;

bb_length=100;
bb_width=14;
bb_height=8;

/* uncomment for generic 9g
servo_length = 23;
servo_width = 12.5;
servo_tall = 26;        //top to bottom of servo casing (w/o drive gear)
servo_clear = 5.5;      //servo clearance from inside shoulder wall
horn_radius1 = 3.5;
horn_radius2 = 2;
horn_rdist = 13;
*/

// tower pro 9g
servo_length = 24;
servo_width = 13;
servo_tall = 27;
servo_clear = 7;
horn_radius1 = 3.8;
horn_radius2 = 2.1;
horn_rdist = 14.6;
servo_hole_r = 1;

show_full_assembly = 1;
showservos = 1;
h_pos = (bb_length-20)/2;

/* individual parts (for export) - uncomment one line at a time */
if (show_full_assembly == 0) {
    //porta_arduino();
    //tray();
    //chassis();
    //backbone(bb_length,bb_width,bb_height,servo_length,servo_width);  //use chassis instead!
    //hip(servo_length,servo_width);  //use chassis instead!
    //leg(servo_length,servo_width);
    //servo_button();
    //shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);
}

if (show_full_assembly == 1) {
    //full assembly example

    /*
    distribution
    3   4
    2   1
    */

    translate([0,0,-7]) tray();
    translate([0,0,53]) rotate([0,0,90]) porta_arduino();
    chassis();

    translate([22.25,-40,15.15]) rotate([0,0,0]) servo9g(0);
    translate([-22.25,-40,15.15]) rotate([0,0,180]) servo9g(0);
    translate([-22.25,40,15.15]) rotate([0,0,180]) servo9g(0);
    translate([22.25,40,15.15]) rotate([0,0,0]) servo9g(0);

    translate([h_pos+3.5,-h_pos,0]) rotate([0,-270,180]) shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);
    translate([-h_pos-3.5,-h_pos,0]) rotate([0,90,0]) shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);
    translate([-h_pos-3.5,h_pos,0]) rotate([0,90,0]) shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);
    translate([h_pos+3.5,h_pos,0]) rotate([0,-270,180]) shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);

    translate([22.25,-40,-11.75]) rotate([180,0,0]) servo_button();
    translate([-22.25,-40,-11.75]) rotate([180,0,0]) servo_button();
    translate([-22.25,40,-11.75]) rotate([180,0,0]) servo_button();
    translate([22.25,40,-11.75]) rotate([180,0,0]) servo_button();

    translate([h_pos+3.5,-h_pos,0]) rotate([90,0,90]) shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);
    translate([-h_pos-3.5,-h_pos,0]) rotate([90,0,-90]) shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);
    translate([-h_pos-3.5,h_pos,0]) rotate([90,0,-90]) shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);
    translate([h_pos+3.5,h_pos,0]) rotate([90,0,90]) shoulder(servo_tall,servo_clear,horn_radius1,horn_radius2,horn_rdist);

    translate([64.75,-55,0]) rotate([-90,0,180]) servo9g(0);
    translate([-64.75,-25,0]) rotate([90,180,180]) servo9g(0);
    translate([-64.75,55,0]) rotate([90,180,180]) servo9g(0);
    translate([64.75,25,0]) rotate([-90,0,180]) servo9g(0);

    translate([64.75,-28,0]) rotate([270,0,0]) servo_button();
    translate([-64.75,-52,0]) rotate([90,0,0]) servo_button();
    translate([-64.75,28,0]) rotate([90,0,0]) servo_button();
    translate([64.75,52,0]) rotate([270,0,0]) servo_button();

    translate([h_pos*2+7.5,-h_pos-3.85,0]) rotate([270,0,0]) leg(servo_length,servo_width);
    translate([-h_pos*2-7.5,-h_pos+3.85,0]) rotate([90,180,0]) leg(servo_length,servo_width);
    translate([-h_pos*2-7.5,h_pos+3.85,0]) rotate([90,180,0]) leg(servo_length,servo_width);
    translate([h_pos*2+7.5,h_pos-3.85,0]) rotate([270,0,0]) leg(servo_length,servo_width);

}

module tray() {
    difference() {
        union() {
            translate([-30,-35,30]) cube([60,70,2]);
            cylinder(r=4, h=30);
            intersection() {
                union() {
                    for (i = [[34,17,6],[34,-17,6],[-34,17,6],[-34,-17,6]]) {
                        translate(i) cylinder(r=29.5,h=24);
                    }
                    translate([7.5,-4.5,6]) cube([3,9,24]);
                    translate([-10.5,-4.5,6]) cube([3,9,24]);
                    translate([-10,8,11]) cube([20,2,19]);
                    translate([-10,-10,11]) cube([20,2,19]);
                }
                translate([-10,-10,7]) cube([20,20,24]);
            }
        }
        union() {
            translate([0,0,-1]) difference() {
                union() {
                    cylinder(r=5, h=12);
                }
                union() {
                    translate([0,0,3]) cylinder(r=2.5, h=10);
                    translate([0,0,0.5]) cylinder(r1=2, r2=3.5, h=3);
                }
            }
            translate([-5,2.5,-1]) cube([10,4,4]);
            translate([-5,-6.5,-1]) cube([10,4,4]);
            translate([-1,-5,-1]) cube([2,10,7]);
            translate([0,-30,29]) cylinder(r=1.75, h=4);
            translate([0,-30,29.25]) cylinder(r=3.33, h=1.75, $fn=6);
            translate([0,30,29]) cylinder(r=1.75, h=4);
            translate([0,30,29.25]) cylinder(r=3.33, h=1.75, $fn=6);
            translate([24.13,-20.32,29]) cylinder(r=1.75, h=4);
            translate([-24.13,-19.05,29]) cylinder(r=1.75, h=4);
            translate([19.05,31.75,29]) cylinder(r=1.75, h=4);
            translate([-8.89,31.75,29]) cylinder(r=1.75, h=4);
        }
    }
}

module porta_arduino() {
    base_lenght = 70;
    base_width = 60;
    base_height = 3;
    ardu_lenght_mil = 2700;
    ardu_width_mil = 2100;
    ardu_height_mil = 40;
    ardu_hole1_x_mil = 550;
    ardu_hole1_y_mil = 100;
    ardu_hole2_x_mil = 600;
    ardu_hole2_y_mil = 2000;
    ardu_hole3_x_mil = 2600;
    ardu_hole3_y_mil = 300;
    ardu_hole4_x_mil = 2600;
    ardu_hole4_y_mil = 1400;
    outline = true;
    outline_width_mil = 30;
    outline_height_mil = 140;

    translate([-mil_to_mm(ardu_lenght_mil)/2,-mil_to_mm(ardu_width_mil)/2,0]) difference() {
        union() {
            cube([mil_to_mm(ardu_lenght_mil),mil_to_mm(ardu_width_mil),mil_to_mm(ardu_height_mil)]); //arduino
            translate([-(base_lenght-mil_to_mm(ardu_lenght_mil))/2,-(base_width-mil_to_mm(ardu_width_mil))/2,0]) cube([base_lenght,base_width,base_height]); //cuerpo
            if (outline == true) { //contorno
                translate([0,0,base_height]) linear_extrude(height = mil_to_mm(outline_height_mil), convexity = 10, twist = 0)
                polygon(points=[ [mil_to_mm(0),mil_to_mm(0)],
                [mil_to_mm(0),mil_to_mm(0+ardu_width_mil)],
                [mil_to_mm(0+ardu_lenght_mil),mil_to_mm(0+ardu_width_mil)],
                [mil_to_mm(0+ardu_lenght_mil),mil_to_mm(0)],
                [mil_to_mm(0+outline_width_mil),mil_to_mm(0+outline_width_mil)],
                [mil_to_mm(0+outline_width_mil),mil_to_mm(0+ardu_width_mil-outline_width_mil)],
                [mil_to_mm(0+ardu_lenght_mil-outline_width_mil),mil_to_mm(0+ardu_width_mil-outline_width_mil)],
                [mil_to_mm(0+ardu_lenght_mil-outline_width_mil),mil_to_mm(0+outline_width_mil)]
                ], paths=[ [3,2,1,0],[4,5,6,7] ]);
            }
        }
        union() {
            for (i= [ [mil_to_mm(ardu_hole1_x_mil),mil_to_mm(ardu_hole1_y_mil),-1], 
            [mil_to_mm(ardu_hole2_x_mil),mil_to_mm(ardu_hole2_y_mil),-1], 
            [mil_to_mm(ardu_hole3_x_mil),mil_to_mm(ardu_hole3_y_mil),-1], 
            [mil_to_mm(ardu_hole4_x_mil),mil_to_mm(ardu_hole4_y_mil),-1] ]) {
                translate(i) cylinder(r=1.75, h=base_height+2);
                translate(i) translate([0,0,0.75]) rotate([0,0,90]) cylinder(r=3.33, h=1.75, $fn=6);
            }
            //tornillos montaje
            translate([(5-((base_lenght-mil_to_mm(ardu_lenght_mil))/2)),(base_width/2-(base_width-mil_to_mm(ardu_width_mil))/2),-1]) cylinder(r=1.75, h=base_height+2);
            translate([(5-((base_lenght-mil_to_mm(ardu_lenght_mil))/2)),(base_width/2-(base_width-mil_to_mm(ardu_width_mil))/2),1]) cylinder(r=3.5, h=base_height+2);
            translate([((5-((base_lenght-mil_to_mm(ardu_lenght_mil))/2))+(base_lenght-10)),(base_width/2-(base_width-mil_to_mm(ardu_width_mil))/2),-1]) cylinder(r=1.75, h=base_height+2);
            translate([((5-((base_lenght-mil_to_mm(ardu_lenght_mil))/2))+(base_lenght-10)),(base_width/2-(base_width-mil_to_mm(ardu_width_mil))/2),1]) cylinder(r=3.5, h=base_height+2);
        }
    }
}

function mil_to_mm(mil) = mil * 0.0254;

module chassis() {
    backbone(bb_length,bb_width,bb_height,servo_length,servo_width);
    translate([0,h_pos,(bb_height/2-4)]) rotate([0,0,180]) hip(servo_length,servo_width);
    translate([0,-h_pos,(bb_height/2-4)]) hip(servo_length,servo_width);
}

module backbone(bl,bw,bh,sl,sw) {
    h_pos = ((bl-20) / 2);
    difference() {
        // main
        translate([-(bw/2),-(bl/2),-(bh/2)])  cube([bw,bl,bh]);
        //servo body cutouts
        for (i = [[-16.5,h_pos,0],[16.5,h_pos,0],[-16.5,-h_pos,0],[16.5,-h_pos,0]]) {
            translate(i) cube([sl,sw,bh+1], center=true);
        }
        //servo mount holes
        for (i = [[2.5,h_pos,-10],[-2.5,h_pos,-10],[-2.5,-h_pos,-10],[2.5,-h_pos,-10]]) {
            translate(i) cylinder(r=servo_hole_r,h=20);
        }
        //round side indents
        for (i = [[34,17,-5],[34,-17,-5],[-34,17,-5],[-34,-17,-5]]) {
            translate(i) cylinder(r=30,h=10);
        }
        //center hole
        translate([0,0,-4-1]) cylinder(r=3,h=10);
    }
}

module hip(l,w) {
    difference() {
        union() {
            //main
            translate([-29,-10,0]) cube([58.5,20,4]);
            //outside edges
            for (i = [[-32.5,-7,0],[26.5,-7,0]] ) {
               translate(i) cube([6,14,4]);
            }
            //rounded corners
            for (i = [[-29.5,7,0],[-29.5,-7,0],[29.5,7,0],[29.5,-7,0]] ) {
                translate(i) cylinder(r=3,h=4);
            }
        }
        //servo mount holes
        for (i = [[-2.5,0,-2],[-30.5,0,-2],[2.5,0,-2],[30.5,0,-2]] ) {
            translate(i) cylinder(r=servo_hole_r,h=20);
        }
        //servo body cutouts
        for (i = [[-16.5,0,2],[16.5,0,2]] ) {
            translate(i) cube([l,w,22], center=true);
            translate([-12,0,-4]) translate(i) cube([l,w,22]);
        }
    }
}

module leg(sl,sw) {
    difference() {
        //solid parts
        union() {
            hull(){
                //main inner square
                translate([-30,-10,0]) cube([28,20,4]);
                //lower taper
                translate([5,-1.5,0]) cube([2,3,4]);
            }
            //leg
            translate([0,-1.5,0]) cube([40,3,4]);
            //feet
            translate([38,-3,0]) cube([2,6,6]);
            //top bar
            translate([-33,-7,0]) cube([6,14,4]);
            //rounded corners
            for (i = [ [-30,7,0],[-30,-7,0] ]) {
                translate(i) cylinder(r=3,h=4);
            }
        }
        //servo mounts
        for (i = [ [-3,0,-2],[-31,0,-2] ]) {
            translate(i) cylinder(r=servo_hole_r,h=20);
        }
        //hole for servo body
        translate([-17,0,2])  cube([sl,sw,22], center=true);
        translate([-29,0,2-4])  cube([sl,sw,22]);
    }
}

module servo_button() {
    cylinder(r=4.3,h=2);
    cylinder(r=2.65,h=6.192);
}

module shoulder(st,sc,hr1,hr2,hrd) {
    // st = servo tall gap
    // cc = servo clearance from inside wall
    // hr1 = horn radius1
    // hr2 = horn radius2
    // hrd = distance between horn radii

    //bottom plate constants
    plate_thick = 3.5;
    offset_x = 4; offset_y = 4;
    m3_screw_dia = 3+0.5;
    m3_screw_head_dia = 7;
    m3_screw_head_height = 1.75;
    m3_nut_wrench_size = 6.6;
    m3_nut_height = 1.75;

    //calc'd starts-
    ch_st = (st/2)-1;
    hr_st = -((st/2)+6);
    hh = sc+14.15;

    //channel bracket
    difference() {
        union() {
            //vert wall
            translate([ch_st,-8,0]) cube([6,16,hh+.35]);
            //round top
            *translate([ch_st,-8,hh]) cube([6,16,8]);
            translate([ch_st,0,hh+.35]) rotate([0,90,0]) cylinder(r=8, h=6);
        }
        // button hole bottom
        translate([ch_st,0,hh]) rotate([0,90,0]) cylinder(r=3,h=6+1);
        // button hole top
        translate([ch_st-1,0,hh-.1]) rotate([0,90,0]) cylinder(r=5.6,h=3);
        //bottom channel
        *translate([ch_st+5,-5,-1]) cube([2,10,30]);
    }

    //horn bracket
    difference() {
        union() {
            //vert wall
            translate([hr_st,-8,0]) cube([5,16,hh+.35]);
            //round top
            *translate([hr_st,-8,hh]) cube([5,16,8]);
            translate([hr_st,0,hh+.35]) rotate([0,90,0]) cylinder(r=8, h=5);
            //horn block
            translate([hr_st-2,-8,0]) cube([2,16,8]);
        }
        //servo horn hole
        translate([hr_st,0,hh]) rotate([0,90,0]) cylinder(r=hr1,h=6);
        //servo horn channel
        hull() {
            //top channel
            translate([hr_st-1,-hr1,hh]) cube([3,hr1*2,9]);
            //large round
            translate([hr_st-1,0,hh]) rotate([0,90,0]) cylinder(r=hr1,h=3);
            //small round
            translate([hr_st-1,0,hh-hrd]) rotate([0,90,0]) cylinder(r=hr2,h=3);
        }
    }

    difference() {
        //main plate
        translate([-19,-8,0]) cube([37,16,plate_thick]);
        //screw holes
        for (i = [ [offset_x-.5,offset_y,-1], [-offset_x-.5,-offset_y,-1]]) { //[offset_x-.5,-offset_y,-1], [-offset_x-.5,offset_y,-1],
            translate(i) cylinder(r=m3_screw_dia/2, h=plate_thick+2);
        }
        //screw head holes
        for (i = [[-offset_x-.5,-offset_y,plate_thick-m3_screw_head_height+.1]]) { //[offset_x-.5,-offset_y,plate_thick-m3_screw_head_height+.1],
            translate(i) cylinder(r=m3_screw_head_dia/2, h=m3_screw_head_height);
        }
        //nut traps
        for (i = [[offset_x-.5,offset_y,plate_thick-m3_nut_height+.1],]) { //[-offset_x-.5,offset_y,plate_thick-m3_nut_height+.1]
            translate(i) cylinder(r=m3_nut_wrench_size/2, h=m3_nut_height, $fn=6);
        }
    }
}

module servo_horn() {
    difference() {
        union() {
            translate([0,0,2.7]) hull() {
                cylinder(r=3, h=1.6);
                translate([14.15,0,0]) cylinder(r=1.9, h=1.6);
            }
            cylinder(r=3.65, h=4.3);
        }
        union() {
            translate([0,0,-1]) cylinder(r=2.2, h=3.7);
            translate([0,0,3.45]) cylinder(r=2.4, h=2);
            translate([0,0,-1]) cylinder(r=1.25, h=7);
            translate([4.5,0,1]) cylinder(r=0.45, h=4);
            translate([6.6,0,1]) cylinder(r=0.45, h=4);
            translate([8.7,0,1]) cylinder(r=0.45, h=4);
            translate([10.8,0,1]) cylinder(r=0.45, h=4);
            translate([12.9,0,1]) cylinder(r=0.45, h=4);
            translate([15,0,1]) cylinder(r=0.45, h=4);
        }
    }
}

module servo9g(angle) {
    //TowerPro SG90 9g servo
    if (showservos == 1) {
        rotate([0,0,angle]) servo_horn();
        translate([-17.2,-6.325,-27]) union() {
            //cuerpo motor
            translate([0,0,0]) cube([23,12.65,22.8]);
            translate([-4.75,0,15.85]) difference() {
                cube([32.5,12.65,2.3]);
                union() {
                    translate([2.2,6.325,-1]) cylinder(r=1, h=4);
                    translate([-1,5.675,-1]) cube([3,1.3,4]);
                    translate([30.3,6.325,-1]) cylinder(r=1, h=4);
                    translate([30.3,5.675,-1]) cube([3,1.3,4]);
                }
            }
            translate([17.2,6.325,22.8]) cylinder(r=5.8, h=4.2);
            translate([10.35,6.325,22.8]) cylinder(r=2.75, h=4.2);
            translate([10.35,3.575,22.8]) cube([3,5.5,4.2]);
            //eje motor
            translate([17.2,6.325,27]) difference() {
                cylinder(r=2.325, h=2.7);
                translate([0,0,-1] )cylinder(r=0.9, h=5);
            }
            //cables
            translate([23,6.325,5.1]) union() {
                rotate([0,90,0]) color("red") cylinder(r=0.6, h=4.75);
                translate([0,-1.1,0]) rotate([0,90,0]) color("brown") cylinder(r=0.6, h=4.75);
                translate([0,1.1,0]) rotate([0,90,0]) color("orange") cylinder(r=0.6, h=4.75);
            }
        }
    }
}

